

function copyDataWithoutFormulas2() {
  try {
    console.log("스크립트 실행 시작");
    var startTime = new Date().getTime();
    var sourceSpreadsheetId = "1l6t4onrNJg8YyePZV18Yg4319z6PT1Zp4mbaaTwjcuY";
    var sheetName = "세스코키워드_0731";
    var targetSpreadsheetId = "1T75q8crvVwrD6UFC9I6LqWFw-YU38pXLu4J4u5F2yB0";
    var targetSheetName = "세스코키워드v2_0715";

    var spreadsheetId = "1nwWLGJPL8I8UAd7Cq2rHLUnOciCOhWeHylDgD0Nelho";
    var logSheetName = "Log";
    var startTime = new Date();

    console.log("소스 및 타겟 시트 열기");
    var sourceSpreadsheet = SpreadsheetApp.openById(sourceSpreadsheetId);
    var targetSpreadsheet = SpreadsheetApp.openById(targetSpreadsheetId);
    var sourceSheet = sourceSpreadsheet.getSheetByName(sheetName);
    var targetSheet = targetSpreadsheet.getSheetByName(targetSheetName);

    console.log("공식 제거 시작");
    var formulaRange = targetSheet.getRange("K1:M1");
    var originalFormulas = formulaRange.getFormulas()[0];
    formulaRange.clearContent();

    console.log("어제 날짜 계산");
    var yesterday = new Date(new Date().getTime() - 24*60*60*1000);
    yesterday.setHours(0, 0, 0, 0);
 var yesterdayString = Utilities.formatDate(yesterday, "Asia/Seoul", "yyyy-MM-dd");

 //var yesterdayString = "2025-07-19";

    console.log("어제 날짜: " + yesterdayString);

    console.log("소스 시트에서 데이터 가져오기 시작");
    var data = sourceSheet.getDataRange().getValues();

    console.log("어제 날짜의 데이터 필터링");
    var yesterdayData = data.filter(function(row) {
      var date = new Date(row[0]);
      var dateString = Utilities.formatDate(date, "Asia/Seoul", "yyyy-MM-dd");
      return dateString === yesterdayString;
    });

    console.log("어제 날짜의 데이터 " + yesterdayData.length + "개!");

    // 로그 기록 및 메일 발송 부분
    if (yesterdayData.length === 0) {
      console.log("어제 날짜의 데이터가 없습니다.");

      var endTime = new Date();
      var executionTime = endTime - startTime;
      var results = [
        "09 Keyword 수집 Data",
        "어제 날짜의 데이터가 없습니다.",
        startTime,
        endTime,
        executionTime
      ];
      var spreadsheet = SpreadsheetApp.openById(spreadsheetId);
      var sheet = spreadsheet.getSheetByName(logSheetName);
      sheet.appendRow(results);

      var body = results.join("\n"); 

      // 메일 전송
      sendEmailResult2(body);
      
      return;
    }

    console.log("타겟 시트에서 어제 날짜의 데이터 삭제 시작");
    deleteFilteredRows(targetSheet, 1, yesterdayString);

    console.log("타겟 시트에 새 데이터 추가");
    var lastRow = targetSheet.getLastRow();
    targetSheet.getRange(lastRow + 1, 1, yesterdayData.length, yesterdayData[0].length).setValues(yesterdayData);

    console.log("공식 복원 시작");
    originalFormulas.forEach((formula, index) => {
      if (formula !== "") {
        targetSheet.getRange(1, 11 + index).setFormula(formula);
      }
    });

    console.log("스크립트 실행 완료");

    var endTime = new Date();
    var executionTime = endTime - startTime;
    var results = [
      "09 Keyword Yesterday Data",
      yesterdayData.length,
      startTime,
      endTime,
      executionTime
    ];
    var spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    var sheet = spreadsheet.getSheetByName(logSheetName);
    sheet.appendRow(results);

    // results 배열을 문자열로 변환하여 body에 할당
    var body = results.join("\n"); 

    // 메일 전송
    sendEmailResult2(body);

    // 첫 번째 함수 완료 후 호출
    //firstFunction();
       scheduleNextFunction('mergeAndUpdateSheetsLastDate', 1);

  } catch (error) {
    console.error("오류 발생: " + error.message);
  }
}



function scheduleNextFunction(functionName, delayInMinutes) {
  console.log(`${functionName} 실행 예약 시작`);
  
  // 기존 트리거 삭제
  deleteTriggerByFunctionName(functionName);
  
  // 새 트리거 생성
  ScriptApp.newTrigger(functionName)
    .timeBased()
    .after(delayInMinutes * 60 * 1000)
    .create();
  
  console.log(`${functionName} 실행이 ${delayInMinutes}분 후로 예약되었습니다.`);
}

function deleteTriggerByFunctionName(functionName) {
  var triggers = ScriptApp.getProjectTriggers();
  for (var i = 0; i < triggers.length; i++) {
    if (triggers[i].getHandlerFunction() == functionName) {
      ScriptApp.deleteTrigger(triggers[i]);
      console.log(`${functionName}에 대한 기존 트리거가 삭제되었습니다.`);
    }
  }
}

function mergeAndUpdateSheetsLastDate() {
  console.log("2단계 스크립트 함수 실행 시작: mergeAndUpdateSheetsLastDate");
  // 함수 로직
  console.log("2단계 스크립트 함수 실행 완료: mergeAndUpdateSheetsLastDate");
  
  // 이 함수의 트리거 삭제
  deleteTriggerByFunctionName('mergeAndUpdateSheetsLastDate');
}



function deleteFilteredRows(targetSheet, filterColumn, filterValue) {
  const targetLastRow = targetSheet.getLastRow();
  if (targetLastRow <= 1) return; // 데이터가 없으면 종료

  const targetData = targetSheet.getRange(2, 1, targetLastRow - 1, targetSheet.getLastColumn()).getValues(); // 첫 번째 행 제외
  let rowsToDelete = [];
  let startRow = null;

  for (let i = 0; i < targetData.length; i++) {
    var date = new Date(targetData[i][filterColumn - 1]);
    var dateString = Utilities.formatDate(date, "Asia/Seoul", "yyyy-MM-dd");
    if (dateString === filterValue) {
      if (startRow === null) startRow = i + 2; // 2행부터 시작하므로 2를 더함
    } else {
      if (startRow !== null) {
        rowsToDelete.push({start: startRow, end: i + 1});
        startRow = null;
      }
    }
  }

  // 마지막 범위 처리
  if (startRow !== null) {
    rowsToDelete.push({start: startRow, end: targetData.length + 1});
  }

  // 뒤에서부터 삭제
  let totalDeletedRows = 0;
  for (let i = rowsToDelete.length - 1; i >= 0; i--) {
    const range = rowsToDelete[i];
    const rowsCount = range.end - range.start + 1;
    targetSheet.deleteRows(range.start, rowsCount);
    totalDeletedRows += rowsCount;
  }

  console.log(`삭제된 행 수: ${totalDeletedRows}`);
}




function sendEmailResult2(body) { 
  // 실행 결과
  var result = "세스코 키워드 수집 실행 결과 메시지";

  // 메일 제목
  var subject = "세스코 키워드 스크립트 실행 결과";

  // 메일 내용
  //var body = "스크립트가 성공적으로 실행되었습니다.\n\n결과:\n" + result;

  // 메일 보내기
  MailApp.sendEmail("adminpmp@aaa.com", subject, body);
}